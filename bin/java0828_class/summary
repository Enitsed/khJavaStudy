변수 : 하나의 값을 저장하기 위한 기억공간
	int num = 3;

배열 : 데이터 타입이 같은 데이터를 하나로 묶는 것
	int[] num = new int[3];
	num[0] = 10;
	num[1] = 20;
	num[2] = 30;

홍길동 30 M // 데이타 타입이 다름
갑동이 25 F

String name = "홍길동";
String name2 = "갑동이";
int age = 30;
int age2 = 25;

// c에서 구조체 사용 (데이타 타입이 다른것들 끼리 묶기 위해서)
typeof struct person{
	char[] name;
	int age;
	char gen;
}

person p;
p.name = "홍길동";
p.age = 30;
p.gen = 'M';

클래스 : 구조체(멤버변수) + 함수(메소드)
 => 객체들의 공통점을 찾아내어 그 공통점을 표현하는 것, 객체의 설계도
 
객체(object) : 실세계에 존재하는 모든 사물이나 개념
객체 모델링 : 객체의 특징과 기능을 구분한다. (객체를 프로그램으로 구현하기 위한 분석작업이다.)

홍길동(객체)
객체의 특징 : 홍길동 (이름) 30 (나이) 남 (성별)
객체의 기능 : 먹는다. 달린다.

이영희(객체)
객체의 특징 : 이영희 (이름) 25 (나이) 여 (성별)
객체의 기능 : 먹는다. 달린다.

// 사용자가 정의한 데이터 타입
// 객체를 생성하기 위한 틀(설계도)
class Person{
	String name; // 멤버 변수
	int age;
	char gen;
	
	void run(){	// 메서드
	System.out.println("run");
	}
	void eat(){
	System.out.println("eat");
	}
}

public static void main(String[] args) {
	int name; // 스택에 저장공간 확보 후 값이 저장됨.
	name =3;
	Person p;  // 객체선언 - 주소를 저장하기 위한 stack영역에서 4바이트 메모리 생성
	// 스택에 저장공간 확보 후 heap에 저장 되어 있는 '주소값'이 저장됨 
	// 메모리 생성 안됨.
	
	//	p="홍길동"; (X)
	
	// 참조형 데이타 타입은 new라는 키워드로 메모리 생성
	p = new Person(); // 객체생성 - heap 영역에 메모리 생성
	
	p: 객체참조변수 = 객체변수 = 참조변수
	p.name = "홍길동";
	p.age = 30;
	p.gen = '남';
	p.eat();
	p.run();
	
	person pn = new Person(); // 객체 선언과 생성을 동시에 할 수 있다.
	pn.name = "이영희";
	pn.age = 25;
	pn.gen = '여';
	pn.eat();
	pn.run();
}

[명명규칙]
공통이름 규칙
1. 영문, 숫자, 특수문자($,_)조합해서 사용한다.
2. 숫자로 시작할 수 없다.
3. 이름길이에 제한이 없다.

[클래스]
1. 대문자로 시작한다.(관례)
2. 두단어 이상 이름을 지을때는 단어의 첫글자는 대문자로 시작하고 나머지 소문자로 사용한다. (CarData)

[변수, 메소드]
1. 소문자로 시작한다. (관례)
2. 두단어 이상 이름을 지을때는 두번째 단어의 첫글자는 대문자로 시작하고 나머지는 소문자로 사용한다.(carData)
